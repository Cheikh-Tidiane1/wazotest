import { Call, Room, Contact, Context, Meeting, UserInfo, Extra, ModalParameter, Sounds, PluginConfiguration, WDASession, PortalSession, UpdateBadgeArgs, DisplayBannerArgs, MobileMenuItem } from './types.js';
declare global {
    var pluginId: string;
    var _setPluginId: Function;
    var _configurePlugin: Function;
    var Wazo: any;
}
type DelayedMessage = {
    type: string;
    payload: Object;
};
export declare class App {
    context: Context;
    _initializeCompleted: boolean;
    _initializeResolve: Function | null;
    _initializeTimeout: ReturnType<typeof setTimeout> | null;
    _pluginId: string | null;
    _baseUrl: string | null;
    _entityId: string | null;
    _queuedMessages: DelayedMessage[];
    _isBackground: boolean;
    _headerBackCallbacks: Record<string, Function>;
    onNewSession: (session: WDASession | PortalSession) => void;
    onUnLoaded: (e: Event) => void;
    onPluginUnLoaded: () => void;
    onAppUnLoaded: (tabId: string) => void;
    onIframeMessage: (message: Object) => void;
    onBackgroundMessage: (message: Object) => void;
    onLogout: () => void;
    onCallIncoming: (call: Call) => void;
    onCallMade: (call: Call) => void;
    onCallAnswered: (call: Call) => void;
    onCallAccepted: (call: Call) => void;
    onCallHungUp: (call: Call) => void;
    onUnHandledEvent: (event: MessageEvent) => void;
    onWebsocketMessage: (message: MessageEvent) => void;
    onMeetingCreated: (meeting: Meeting) => void;
    onRouteChanged: (location: Object, action: string) => void;
    onUserJoinRoom: (room: Room) => void;
    onUserLeaveRoom: (room: Room) => void;
    onParticipantJoinRoom: (room: Room, participant: Contact) => void;
    onParticipantLeaveRoom: (room: Room, participant: Contact) => void;
    onConnectedToStack: (stackSession: Object) => void;
    onSwitchTenant: (uuid: string, name: string) => void;
    constructor();
    initialize: () => Promise<unknown>;
    isInitialized: () => boolean;
    getContext: () => Context;
    sendMessageToIframe: (payload: Object) => any;
    sendMessageToBackground: (payload: Object) => any;
    startCall: ({ targets, requestedModalities }: {
        targets: string[];
        requestedModalities: string[];
    }) => void;
    openLink: (url: string) => void;
    createMeeting: (name: string, requireAuthorization?: boolean, persistent?: boolean) => void;
    openMeetingLobby: (extension: string) => void;
    openSettings: () => void;
    ignoreCall(call: Call): void;
    closeLeftPanel: () => any;
    openLeftPanel: () => any;
    playProgressSound: () => any;
    playNewMessageSound: () => any;
    playIncomingCallSound: () => any;
    playDoubleCallSound: () => any;
    playHangupSound: () => any;
    stopCurrentSound: () => any;
    configureSounds: (sounds: Sounds) => any;
    resetSounds: () => any;
    changeNavBarColor: (color: string) => any;
    resetNavBarColor: () => any;
    displayNotification: (title: string, text: string) => any;
    displayModal: ({ url, title, text, htmlText, height, width, hideCloseButton }: ModalParameter) => any;
    removeModal: () => any;
    hasLocalVideoStream: (call: Call) => any;
    getLocalCurrentVideoStream: (call: Call) => any;
    hasRemoveVideoStream: (call: Call) => any;
    getRemoteVideoStream: (call: Call) => any;
    updateBadge: (args: UpdateBadgeArgs) => any;
    displayBanner: (args: DisplayBannerArgs) => any;
    closeBanner: () => any;
    changeToolbarDisplay: (display: boolean) => any;
    setMobileHeader: ({ title, callback }: {
        title?: string | null | undefined;
        callback?: Function | null | undefined;
    }, entityId?: string) => void;
    setMobileContextualMenu: (contextualMenu: MobileMenuItem[], entityId?: string) => any;
    setMobileShowBottomNav: (showBottomNav: boolean, entityId?: string) => any;
    onMobileMenuAction: (id: string) => any;
    _onMessage: (event: MessageEvent) => void;
    _sendMessage: (type: string, payload?: {}) => any;
    _sendQueuedMessages: () => void;
    _onLoaded: (session: UserInfo, theme: Object, locale: string, extra: Extra | null) => void;
    _setPluginId: (pluginId: string) => void;
    _unloadPlugin: () => void;
    _configurePlugin: (configuration: PluginConfiguration) => void;
    _resetEvents: () => void;
}
declare const _default: App;
export default _default;
//# sourceMappingURL=app.d.ts.map